package ${package.Controller}import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

;
${package.Service}
.${table.serviceName};
    ${package.Entity}
        .${entity};

/**
 * @author ${author}
 * @since ${date}
 */
@Api(value = "${entity}相关的接口", tags = "user")
@RestController
@RequestMapping("/${package.ModuleName}/${table.entityPath}")
public class ${table.controllerName} extends BaseController{

private final Logger logger=LoggerFactory.getLogger(${table.controllerName}.class);

@Autowired
private ${table.serviceName} ${table.entityPath}Service;

/**
 * 查询${entity}列表
 */

@ApiOperation(value = "查询所有${entity}", notes = "")
@ApiImplicitParams({
        @ApiImplicitParam(name = "page", value = "第几页", required = true, dataType = "Integer"),
        @ApiImplicitParam(name = "limit", value = "每页多少条", required = true, dataType = "Integer"),
        @ApiImplicitParam(name = "searchKey", value = "筛选条件字段", dataType = "String"),
        @ApiImplicitParam(name = "searchValue", value = "筛选条件关键字", dataType = "String"),
        @ApiImplicitParam(name = "token", value = "令牌", required = true, dataType = "String")
})
@GetMapping()
public Result list(Integer page,Integer limit,String searchKey,String searchValue){
        if(page==null){
        page=0;
        limit=0;
        }
        if(StringUtil.isBlank(searchValue)){
        searchKey=null;
        }
        Page<${entity}> ${table.entityPath}Page= ${table.entityPath}Service.list(new Page<${entity}>(page,limit),searchKey,searchValue);
        return PageResult.toResult(${table.entityPath}Page.getRecords(), ${table.entityPath}Page.getTotal());
        }

/**
 * 添加${entity}
 * @ApiImplicitParam(name = "roleId", value = "用户角色id，多个用','分割", required = true, dataType = "String"),
 **/
@ApiOperation(value = "添加${entity}", notes = "")
@ApiImplicitParams({
        @ApiImplicitParam(name = "${table.entityPath}", value = "${entity}信息", required = true, dataType = "${entity}"),
        @ApiImplicitParam(name = "token", value = "令牌", required = true, dataType = "String")
})
@PostMapping()
public Result add(${entity} ${table.entityPath},HttpServletRequest request){
        boolean result= ${table.entityPath}Service.add(${table.entityPath},this.getActiveUser(request));
        if(result){
        //添加成功
        return Result.success();
        }else{
        //添加失败
        return Result.failure(ResultCode.ERROR);
        }
        }

/**
 * 修改${entity}
 * @ApiImplicitParam(name = "roleId", value = "用户角色id", required = true, dataType = "String"),
 **/
@ApiOperation(value = "修改${entity}", notes = "")
@ApiImplicitParams({
        @ApiImplicitParam(name = "${entity}", value = "${entity}信息", required = true, dataType = "${entity}"),
        @ApiImplicitParam(name = "token", value = "令牌", required = true, dataType = "String")
})
@PutMapping()
public Result update(${entity} ${table.entityPath} ,HttpServletRequest request){
        boolean result= ${table.entityPath}Service.update(${table.entityPath},this.getActiveUser(request));
        if(result){
        //修改成功
        return Result.success();
        }else{
        //修改失败
        return Result.failure(ResultCode.ERROR);
        }
        }

/**
 * 删除${entity}
 **/
@ApiOperation(value = "修改${entity}", notes = "")
@ApiImplicitParams({
        @ApiImplicitParam(name = "${entity}", value = "${entity}信息", required = true, dataType = "${entity}"),
        @ApiImplicitParam(name = "token", value = "令牌", required = true, dataType = "String")
})
@DeleteMapping("/{id}")
public Result delete(@PathVariable("id") String id){
        boolean result= ${table.entityPath}Service.delete(id);
        if(result){
        //删除成功
        return Result.success();
        }else{
        //删除失败
        return Result.failure(ResultCode.ERROR);
        }
        }
        }